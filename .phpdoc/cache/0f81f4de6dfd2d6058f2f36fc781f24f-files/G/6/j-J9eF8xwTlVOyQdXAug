1749751335
0f81f4de6dfd2d6058f2f36fc781f24f-phpdoc%3Aaa668aacc87317fb38878c4124be8e8e-ff334de683ee55111978b596008a6000
s:7164:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lIjtzOjM4OiJzZWN1cml0eV9hdXRoZW50aWNhdG9yX3JlbWVtYmVyX21lLnBocCI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjE6e3M6NTg6IlxTeW1mb255XENvbXBvbmVudFxEZXBlbmRlbmN5SW5qZWN0aW9uXExvYWRlclxDb25maWd1cmF0b3IiO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo1ODoiXFN5bWZvbnlcQ29tcG9uZW50XERlcGVuZGVuY3lJbmplY3Rpb25cTG9hZGVyXENvbmZpZ3VyYXRvciI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjEyOiJDb25maWd1cmF0b3IiO319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaGFzaCI7czozMjoiZmYzMzRkZTY4M2VlNTUxMTE5NzhiNTk2MDA4YTYwMDAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czo4NjoidmVuZG9yL3N5bWZvbnkvc2VjdXJpdHktYnVuZGxlL1Jlc291cmNlcy9jb25maWcvc2VjdXJpdHlfYXV0aGVudGljYXRvcl9yZW1lbWJlcl9tZS5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjQwOTg6Ijw/cGhwCgovKgogKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgU3ltZm9ueSBwYWNrYWdlLgogKgogKiAoYykgRmFiaWVuIFBvdGVuY2llciA8ZmFiaWVuQHN5bWZvbnkuY29tPgogKgogKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRQogKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS4KICovCgpuYW1lc3BhY2UgU3ltZm9ueVxDb21wb25lbnRcRGVwZW5kZW5jeUluamVjdGlvblxMb2FkZXJcQ29uZmlndXJhdG9yOwoKdXNlIFN5bWZvbnlcQnVuZGxlXFNlY3VyaXR5QnVuZGxlXFJlbWVtYmVyTWVcRmlyZXdhbGxBd2FyZVJlbWVtYmVyTWVIYW5kbGVyOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcRGVwZW5kZW5jeUluamVjdGlvblxQYXJhbWV0ZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxTZWN1cml0eVxDb3JlXFNpZ25hdHVyZVxTaWduYXR1cmVIYXNoZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxTZWN1cml0eVxIdHRwXEF1dGhlbnRpY2F0b3JcUmVtZW1iZXJNZUF1dGhlbnRpY2F0b3I7CnVzZSBTeW1mb255XENvbXBvbmVudFxTZWN1cml0eVxIdHRwXEV2ZW50TGlzdGVuZXJcQ2hlY2tSZW1lbWJlck1lQ29uZGl0aW9uc0xpc3RlbmVyOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcU2VjdXJpdHlcSHR0cFxFdmVudExpc3RlbmVyXFJlbWVtYmVyTWVMaXN0ZW5lcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFNlY3VyaXR5XEh0dHBcUmVtZW1iZXJNZVxQZXJzaXN0ZW50UmVtZW1iZXJNZUhhbmRsZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxTZWN1cml0eVxIdHRwXFJlbWVtYmVyTWVcUmVtZW1iZXJNZUhhbmRsZXJJbnRlcmZhY2U7CnVzZSBTeW1mb255XENvbXBvbmVudFxTZWN1cml0eVxIdHRwXFJlbWVtYmVyTWVcUmVzcG9uc2VMaXN0ZW5lcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFNlY3VyaXR5XEh0dHBcUmVtZW1iZXJNZVxTaWduYXR1cmVSZW1lbWJlck1lSGFuZGxlcjsKCnJldHVybiBzdGF0aWMgZnVuY3Rpb24gKENvbnRhaW5lckNvbmZpZ3VyYXRvciAkY29udGFpbmVyKSB7CiAgICAkY29udGFpbmVyLT5zZXJ2aWNlcygpCiAgICAgICAgLT5zZXQoJ3NlY3VyaXR5LnJlbWVtYmVybWUucmVzcG9uc2VfbGlzdGVuZXInLCBSZXNwb25zZUxpc3RlbmVyOjpjbGFzcykKICAgICAgICAgICAgLT50YWcoJ2tlcm5lbC5ldmVudF9zdWJzY3JpYmVyJykKCiAgICAgICAgLT5zZXQoJ3NlY3VyaXR5LmF1dGhlbnRpY2F0b3IucmVtZW1iZXJfbWVfc2lnbmF0dXJlX2hhc2hlcicsIFNpZ25hdHVyZUhhc2hlcjo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdwcm9wZXJ0eV9hY2Nlc3NvcicpLAogICAgICAgICAgICAgICAgYWJzdHJhY3RfYXJnKCdzaWduYXR1cmUgcHJvcGVydGllcycpLAogICAgICAgICAgICAgICAgbmV3IFBhcmFtZXRlcigna2VybmVsLnNlY3JldCcpLAogICAgICAgICAgICAgICAgbnVsbCwKICAgICAgICAgICAgICAgIG51bGwsCiAgICAgICAgICAgIF0pCgogICAgICAgIC0+c2V0KCdzZWN1cml0eS5hdXRoZW50aWNhdG9yLnNpZ25hdHVyZV9yZW1lbWJlcl9tZV9oYW5kbGVyJywgU2lnbmF0dXJlUmVtZW1iZXJNZUhhbmRsZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFic3RyYWN0KCkKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIGFic3RyYWN0X2FyZygnc2lnbmF0dXJlIGhhc2hlcicpLAogICAgICAgICAgICAgICAgYWJzdHJhY3RfYXJnKCd1c2VyIHByb3ZpZGVyJyksCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdyZXF1ZXN0X3N0YWNrJyksCiAgICAgICAgICAgICAgICBhYnN0cmFjdF9hcmcoJ29wdGlvbnMnKSwKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ2xvZ2dlcicpLT5udWxsT25JbnZhbGlkKCksCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+dGFnKCdtb25vbG9nLmxvZ2dlcicsIFsnY2hhbm5lbCcgPT4gJ3NlY3VyaXR5J10pCgogICAgICAgIC0+c2V0KCdzZWN1cml0eS5hdXRoZW50aWNhdG9yLnBlcnNpc3RlbnRfcmVtZW1iZXJfbWVfaGFuZGxlcicsIFBlcnNpc3RlbnRSZW1lbWJlck1lSGFuZGxlcjo6Y2xhc3MpCiAgICAgICAgICAgIC0+YWJzdHJhY3QoKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgYWJzdHJhY3RfYXJnKCd0b2tlbiBwcm92aWRlcicpLAogICAgICAgICAgICAgICAgYWJzdHJhY3RfYXJnKCd1c2VyIHByb3ZpZGVyJyksCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdyZXF1ZXN0X3N0YWNrJyksCiAgICAgICAgICAgICAgICBhYnN0cmFjdF9hcmcoJ29wdGlvbnMnKSwKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ2xvZ2dlcicpLT5udWxsT25JbnZhbGlkKCksCiAgICAgICAgICAgICAgICBhYnN0cmFjdF9hcmcoJ3Rva2VuIHZlcmlmaWVyJyksCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+dGFnKCdtb25vbG9nLmxvZ2dlcicsIFsnY2hhbm5lbCcgPT4gJ3NlY3VyaXR5J10pCgogICAgICAgIC0+c2V0KCdzZWN1cml0eS5hdXRoZW50aWNhdG9yLmZpcmV3YWxsX2F3YXJlX3JlbWVtYmVyX21lX2hhbmRsZXInLCBGaXJld2FsbEF3YXJlUmVtZW1iZXJNZUhhbmRsZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgc2VydmljZSgnc2VjdXJpdHkuZmlyZXdhbGwubWFwJyksCiAgICAgICAgICAgICAgICB0YWdnZWRfbG9jYXRvcignc2VjdXJpdHkucmVtZW1iZXJfbWVfaGFuZGxlcicsICdmaXJld2FsbCcpLAogICAgICAgICAgICAgICAgc2VydmljZSgncmVxdWVzdF9zdGFjaycpLAogICAgICAgICAgICBdKQogICAgICAgIC0+YWxpYXMoUmVtZW1iZXJNZUhhbmRsZXJJbnRlcmZhY2U6OmNsYXNzLCAnc2VjdXJpdHkuYXV0aGVudGljYXRvci5maXJld2FsbF9hd2FyZV9yZW1lbWJlcl9tZV9oYW5kbGVyJykKCiAgICAgICAgLT5zZXQoJ3NlY3VyaXR5Lmxpc3RlbmVyLmNoZWNrX3JlbWVtYmVyX21lX2NvbmRpdGlvbnMnLCBDaGVja1JlbWVtYmVyTWVDb25kaXRpb25zTGlzdGVuZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFic3RyYWN0KCkKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIGFic3RyYWN0X2FyZygnb3B0aW9ucycpLAogICAgICAgICAgICAgICAgc2VydmljZSgnbG9nZ2VyJyktPm51bGxPbkludmFsaWQoKSwKICAgICAgICAgICAgXSkKCiAgICAgICAgLT5zZXQoJ3NlY3VyaXR5Lmxpc3RlbmVyLnJlbWVtYmVyX21lJywgUmVtZW1iZXJNZUxpc3RlbmVyOjpjbGFzcykKICAgICAgICAgICAgLT5hYnN0cmFjdCgpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBhYnN0cmFjdF9hcmcoJ3JlbWVtYmVyIG1lIGhhbmRsZXInKSwKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ2xvZ2dlcicpLT5udWxsT25JbnZhbGlkKCksCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+dGFnKCdtb25vbG9nLmxvZ2dlcicsIFsnY2hhbm5lbCcgPT4gJ3NlY3VyaXR5J10pCgogICAgICAgIC0+c2V0KCdzZWN1cml0eS5hdXRoZW50aWNhdG9yLnJlbWVtYmVyX21lJywgUmVtZW1iZXJNZUF1dGhlbnRpY2F0b3I6OmNsYXNzKQogICAgICAgICAgICAtPmFic3RyYWN0KCkKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIGFic3RyYWN0X2FyZygncmVtZW1iZXIgbWUgaGFuZGxlcicpLAogICAgICAgICAgICAgICAgc2VydmljZSgnc2VjdXJpdHkudG9rZW5fc3RvcmFnZScpLAogICAgICAgICAgICAgICAgYWJzdHJhY3RfYXJnKCdvcHRpb25zJyksCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdsb2dnZXInKS0+bnVsbE9uSW52YWxpZCgpLAogICAgICAgICAgICBdKQogICAgICAgICAgICAtPnRhZygnbW9ub2xvZy5sb2dnZXInLCBbJ2NoYW5uZWwnID0+ICdzZWN1cml0eSddKQoKICAgICAgICAvLyBDYWNoZQogICAgICAgIC0+c2V0KCdjYWNoZS5zZWN1cml0eV90b2tlbl92ZXJpZmllcicpCiAgICAgICAgICAgIC0+cGFyZW50KCdjYWNoZS5zeXN0ZW0nKQogICAgICAgICAgICAtPnByaXZhdGUoKQogICAgICAgICAgICAtPnRhZygnY2FjaGUucG9vbCcpCiAgICA7Cn07CiI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG1ldGFkYXRhIjthOjA6e319";